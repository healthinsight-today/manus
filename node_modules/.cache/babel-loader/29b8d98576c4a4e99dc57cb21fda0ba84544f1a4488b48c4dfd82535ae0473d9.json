{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useLocalStorage}from'../hooks/useLocalStorage';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext(undefined);export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useLocalStorage('theme','system');const[isDarkMode,setIsDarkMode]=useState(false);// Check if user prefers dark mode\nuseEffect(()=>{const mediaQuery=window.matchMedia('(prefers-color-scheme: dark)');const handleChange=()=>{if(theme==='system'){setIsDarkMode(mediaQuery.matches);}};// Set initial value\nhandleChange();// Listen for changes\nmediaQuery.addEventListener('change',handleChange);return()=>{mediaQuery.removeEventListener('change',handleChange);};},[theme]);// Update isDarkMode when theme changes\nuseEffect(()=>{if(theme==='dark'){setIsDarkMode(true);}else if(theme==='light'){setIsDarkMode(false);}else{// System preference\nsetIsDarkMode(window.matchMedia('(prefers-color-scheme: dark)').matches);}},[theme]);// Apply theme to document\nuseEffect(()=>{if(isDarkMode){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}},[isDarkMode]);const value={theme,setTheme,isDarkMode};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useLocalStorage","jsx","_jsx","ThemeContext","undefined","ThemeProvider","_ref","children","theme","setTheme","isDarkMode","setIsDarkMode","mediaQuery","window","matchMedia","handleChange","matches","addEventListener","removeEventListener","document","documentElement","classList","add","remove","value","Provider","useTheme","context","Error"],"sources":["/home/ubuntu/healthinsighttoday-frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextProps {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDarkMode: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useLocalStorage<Theme>('theme', 'system');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);\n\n  // Check if user prefers dark mode\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = () => {\n      if (theme === 'system') {\n        setIsDarkMode(mediaQuery.matches);\n      }\n    };\n    \n    // Set initial value\n    handleChange();\n    \n    // Listen for changes\n    mediaQuery.addEventListener('change', handleChange);\n    \n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, [theme]);\n\n  // Update isDarkMode when theme changes\n  useEffect(() => {\n    if (theme === 'dark') {\n      setIsDarkMode(true);\n    } else if (theme === 'light') {\n      setIsDarkMode(false);\n    } else {\n      // System preference\n      setIsDarkMode(window.matchMedia('(prefers-color-scheme: dark)').matches);\n    }\n  }, [theme]);\n\n  // Apply theme to document\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  const value = {\n    theme,\n    setTheme,\n    isDarkMode\n  };\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = (): ThemeContextProps => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CACxF,OAASC,eAAe,KAAQ,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAU3D,KAAM,CAAAC,YAAY,cAAGP,aAAa,CAAgCQ,SAAS,CAAC,CAM5E,MAAO,MAAM,CAAAC,aAA2C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtE,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,eAAe,CAAQ,OAAO,CAAE,QAAQ,CAAC,CACnE,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAU,KAAK,CAAC,CAE5D;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,UAAU,CAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAEpE,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzB,GAAIP,KAAK,GAAK,QAAQ,CAAE,CACtBG,aAAa,CAACC,UAAU,CAACI,OAAO,CAAC,CACnC,CACF,CAAC,CAED;AACAD,YAAY,CAAC,CAAC,CAEd;AACAH,UAAU,CAACK,gBAAgB,CAAC,QAAQ,CAAEF,YAAY,CAAC,CAEnD,MAAO,IAAM,CACXH,UAAU,CAACM,mBAAmB,CAAC,QAAQ,CAAEH,YAAY,CAAC,CACxD,CAAC,CACH,CAAC,CAAE,CAACP,KAAK,CAAC,CAAC,CAEX;AACAT,SAAS,CAAC,IAAM,CACd,GAAIS,KAAK,GAAK,MAAM,CAAE,CACpBG,aAAa,CAAC,IAAI,CAAC,CACrB,CAAC,IAAM,IAAIH,KAAK,GAAK,OAAO,CAAE,CAC5BG,aAAa,CAAC,KAAK,CAAC,CACtB,CAAC,IAAM,CACL;AACAA,aAAa,CAACE,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACE,OAAO,CAAC,CAC1E,CACF,CAAC,CAAE,CAACR,KAAK,CAAC,CAAC,CAEX;AACAT,SAAS,CAAC,IAAM,CACd,GAAIW,UAAU,CAAE,CACdS,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAChD,CAAC,IAAM,CACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC,CACnD,CACF,CAAC,CAAE,CAACb,UAAU,CAAC,CAAC,CAEhB,KAAM,CAAAc,KAAK,CAAG,CACZhB,KAAK,CACLC,QAAQ,CACRC,UACF,CAAC,CAED,mBAAOR,IAAA,CAACC,YAAY,CAACsB,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAjB,QAAA,CAAEA,QAAQ,CAAwB,CAAC,CAChF,CAAC,CAED,MAAO,MAAM,CAAAmB,QAAQ,CAAGA,CAAA,GAAyB,CAC/C,KAAM,CAAAC,OAAO,CAAG9B,UAAU,CAACM,YAAY,CAAC,CACxC,GAAIwB,OAAO,GAAKvB,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAwB,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}