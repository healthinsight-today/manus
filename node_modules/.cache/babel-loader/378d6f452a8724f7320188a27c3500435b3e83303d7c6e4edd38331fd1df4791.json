{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useLocalStorage}from'../hooks/useLocalStorage';import{getReports,getReportById}from'../services/api/reports';import{jsx as _jsx}from\"react/jsx-runtime\";const ReportsContext=/*#__PURE__*/createContext(undefined);export const ReportsProvider=_ref=>{let{children}=_ref;const[reports,setReports]=useLocalStorage('reports',[]);const[currentReport,setCurrentReport]=useState(null);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[filterOptions,setFilterOptions]=useState({dateRange:undefined,reportTypes:undefined,abnormalOnly:false,searchTerm:'',sortBy:'date',sortOrder:'desc'});const fetchReports=async()=>{setIsLoading(true);setError(null);try{const response=await getReports(filterOptions);if(response.success&&response.data){setReports(response.data);}else{setError(response.error||'Failed to fetch reports');}}catch(err){setError(err instanceof Error?err.message:'An unknown error occurred');}finally{setIsLoading(false);}};const fetchReportById=async id=>{setIsLoading(true);setError(null);try{const response=await getReportById(id);if(response.success&&response.data){setCurrentReport(response.data);}else{setError(response.error||`Failed to fetch report with ID: ${id}`);}}catch(err){setError(err instanceof Error?err.message:'An unknown error occurred');}finally{setIsLoading(false);}};const clearCurrentReport=()=>{setCurrentReport(null);};const refreshReports=async()=>{await fetchReports();};// Initial fetch\nuseEffect(()=>{fetchReports();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);// Fetch when filter options change\nuseEffect(()=>{fetchReports();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[filterOptions]);const value={reports,currentReport,isLoading,error,filterOptions,setFilterOptions,fetchReports,fetchReportById,clearCurrentReport,refreshReports};return/*#__PURE__*/_jsx(ReportsContext.Provider,{value:value,children:children});};export const useReports=()=>{const context=useContext(ReportsContext);if(context===undefined){throw new Error('useReports must be used within a ReportsProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useLocalStorage","getReports","getReportById","jsx","_jsx","ReportsContext","undefined","ReportsProvider","_ref","children","reports","setReports","currentReport","setCurrentReport","isLoading","setIsLoading","error","setError","filterOptions","setFilterOptions","dateRange","reportTypes","abnormalOnly","searchTerm","sortBy","sortOrder","fetchReports","response","success","data","err","Error","message","fetchReportById","id","clearCurrentReport","refreshReports","value","Provider","useReports","context"],"sources":["/home/ubuntu/healthinsighttoday-frontend/src/context/ReportsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Report } from '../types/Report';\nimport { FilterOptions } from '../types/Filter';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { getReports, getReportById } from '../services/api/reports';\n\ninterface ReportsContextProps {\n  reports: Report[];\n  currentReport: Report | null;\n  isLoading: boolean;\n  error: string | null;\n  filterOptions: FilterOptions;\n  setFilterOptions: (options: FilterOptions) => void;\n  fetchReports: () => Promise<void>;\n  fetchReportById: (id: string) => Promise<void>;\n  clearCurrentReport: () => void;\n  refreshReports: () => Promise<void>;\n}\n\nconst ReportsContext = createContext<ReportsContextProps | undefined>(undefined);\n\ninterface ReportsProviderProps {\n  children: ReactNode;\n}\n\nexport const ReportsProvider: React.FC<ReportsProviderProps> = ({ children }) => {\n  const [reports, setReports] = useLocalStorage<Report[]>('reports', []);\n  const [currentReport, setCurrentReport] = useState<Report | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [filterOptions, setFilterOptions] = useState<FilterOptions>({\n    dateRange: undefined,\n    reportTypes: undefined,\n    abnormalOnly: false,\n    searchTerm: '',\n    sortBy: 'date',\n    sortOrder: 'desc'\n  });\n\n  const fetchReports = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await getReports(filterOptions);\n      if (response.success && response.data) {\n        setReports(response.data);\n      } else {\n        setError(response.error || 'Failed to fetch reports');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchReportById = async (id: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await getReportById(id);\n      if (response.success && response.data) {\n        setCurrentReport(response.data);\n      } else {\n        setError(response.error || `Failed to fetch report with ID: ${id}`);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearCurrentReport = () => {\n    setCurrentReport(null);\n  };\n\n  const refreshReports = async () => {\n    await fetchReports();\n  };\n\n  // Initial fetch\n  useEffect(() => {\n    fetchReports();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Fetch when filter options change\n  useEffect(() => {\n    fetchReports();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterOptions]);\n\n  const value = {\n    reports,\n    currentReport,\n    isLoading,\n    error,\n    filterOptions,\n    setFilterOptions,\n    fetchReports,\n    fetchReportById,\n    clearCurrentReport,\n    refreshReports\n  };\n\n  return <ReportsContext.Provider value={value}>{children}</ReportsContext.Provider>;\n};\n\nexport const useReports = (): ReportsContextProps => {\n  const context = useContext(ReportsContext);\n  if (context === undefined) {\n    throw new Error('useReports must be used within a ReportsProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAGxF,OAASC,eAAe,KAAQ,0BAA0B,CAC1D,OAASC,UAAU,CAAEC,aAAa,KAAQ,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAepE,KAAM,CAAAC,cAAc,cAAGT,aAAa,CAAkCU,SAAS,CAAC,CAMhF,MAAO,MAAM,CAAAC,eAA+C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC1E,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGX,eAAe,CAAW,SAAS,CAAE,EAAE,CAAC,CACtE,KAAM,CAACY,aAAa,CAAEC,gBAAgB,CAAC,CAAGf,QAAQ,CAAgB,IAAI,CAAC,CACvE,KAAM,CAACgB,SAAS,CAAEC,YAAY,CAAC,CAAGjB,QAAQ,CAAU,KAAK,CAAC,CAC1D,KAAM,CAACkB,KAAK,CAAEC,QAAQ,CAAC,CAAGnB,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAACoB,aAAa,CAAEC,gBAAgB,CAAC,CAAGrB,QAAQ,CAAgB,CAChEsB,SAAS,CAAEd,SAAS,CACpBe,WAAW,CAAEf,SAAS,CACtBgB,YAAY,CAAE,KAAK,CACnBC,UAAU,CAAE,EAAE,CACdC,MAAM,CAAE,MAAM,CACdC,SAAS,CAAE,MACb,CAAC,CAAC,CAEF,KAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/BX,YAAY,CAAC,IAAI,CAAC,CAClBE,QAAQ,CAAC,IAAI,CAAC,CACd,GAAI,CACF,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAA1B,UAAU,CAACiB,aAAa,CAAC,CAChD,GAAIS,QAAQ,CAACC,OAAO,EAAID,QAAQ,CAACE,IAAI,CAAE,CACrClB,UAAU,CAACgB,QAAQ,CAACE,IAAI,CAAC,CAC3B,CAAC,IAAM,CACLZ,QAAQ,CAACU,QAAQ,CAACX,KAAK,EAAI,yBAAyB,CAAC,CACvD,CACF,CAAE,MAAOc,GAAG,CAAE,CACZb,QAAQ,CAACa,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,2BAA2B,CAAC,CAC5E,CAAC,OAAS,CACRjB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAkB,eAAe,CAAG,KAAO,CAAAC,EAAU,EAAK,CAC5CnB,YAAY,CAAC,IAAI,CAAC,CAClBE,QAAQ,CAAC,IAAI,CAAC,CACd,GAAI,CACF,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAzB,aAAa,CAACgC,EAAE,CAAC,CACxC,GAAIP,QAAQ,CAACC,OAAO,EAAID,QAAQ,CAACE,IAAI,CAAE,CACrChB,gBAAgB,CAACc,QAAQ,CAACE,IAAI,CAAC,CACjC,CAAC,IAAM,CACLZ,QAAQ,CAACU,QAAQ,CAACX,KAAK,EAAI,mCAAmCkB,EAAE,EAAE,CAAC,CACrE,CACF,CAAE,MAAOJ,GAAG,CAAE,CACZb,QAAQ,CAACa,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,2BAA2B,CAAC,CAC5E,CAAC,OAAS,CACRjB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAoB,kBAAkB,CAAGA,CAAA,GAAM,CAC/BtB,gBAAgB,CAAC,IAAI,CAAC,CACxB,CAAC,CAED,KAAM,CAAAuB,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,KAAM,CAAAV,YAAY,CAAC,CAAC,CACtB,CAAC,CAED;AACA3B,SAAS,CAAC,IAAM,CACd2B,YAAY,CAAC,CAAC,CACd;AACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA3B,SAAS,CAAC,IAAM,CACd2B,YAAY,CAAC,CAAC,CACd;AACF,CAAC,CAAE,CAACR,aAAa,CAAC,CAAC,CAEnB,KAAM,CAAAmB,KAAK,CAAG,CACZ3B,OAAO,CACPE,aAAa,CACbE,SAAS,CACTE,KAAK,CACLE,aAAa,CACbC,gBAAgB,CAChBO,YAAY,CACZO,eAAe,CACfE,kBAAkB,CAClBC,cACF,CAAC,CAED,mBAAOhC,IAAA,CAACC,cAAc,CAACiC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAA5B,QAAA,CAAEA,QAAQ,CAA0B,CAAC,CACpF,CAAC,CAED,MAAO,MAAM,CAAA8B,UAAU,CAAGA,CAAA,GAA2B,CACnD,KAAM,CAAAC,OAAO,CAAG3C,UAAU,CAACQ,cAAc,CAAC,CAC1C,GAAImC,OAAO,GAAKlC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAyB,KAAK,CAAC,kDAAkD,CAAC,CACrE,CACA,MAAO,CAAAS,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}