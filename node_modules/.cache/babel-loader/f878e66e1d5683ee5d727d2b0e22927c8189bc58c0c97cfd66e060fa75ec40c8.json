{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useLocalStorage}from'../hooks/useLocalStorage';import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext(undefined);// Mock user for development\nconst mockUser={id:'user-1',name:'John Doe',email:'john.doe@example.com',profile:{age:42,gender:'Male',health_conditions:['Hypertension','High Cholesterol'],avatar:'/assets/images/default-profile.png'},settings:{preferred_units:'metric',notification_preferences:{email:true,push:true,sms:false,report_ready:true,insights_update:true,recommendations:true},theme:'light'},created_at:'2023-01-15T08:30:00Z',updated_at:'2023-04-20T14:15:00Z'};export const UserProvider=_ref=>{let{children}=_ref;const[user,setUser]=useLocalStorage('user',null);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const login=async(email,password)=>{setIsLoading(true);setError(null);try{// In a real app, this would be an API call\n// For now, we'll simulate a login with the mock user\nawait new Promise(resolve=>setTimeout(resolve,1000));if(email==='demo@example.com'&&password==='password'){setUser(mockUser);}else{throw new Error('Invalid credentials');}}catch(err){setError(err instanceof Error?err.message:'An unknown error occurred');throw err;}finally{setIsLoading(false);}};const logout=()=>{setUser(null);};const updateUserSettings=settings=>{if(!user)return;setUser({...user,settings:{...user.settings,...settings},updated_at:new Date().toISOString()});};const updateUserProfile=profile=>{if(!user)return;setUser({...user,profile:{...user.profile,...profile},updated_at:new Date().toISOString()});};// Auto-login with mock user for development\nuseEffect(()=>{if(process.env.NODE_ENV==='development'&&!user){setUser(mockUser);}},[setUser,user]);const value={user,isAuthenticated:!!user,isLoading,error,login,logout,updateUserSettings,updateUserProfile};return/*#__PURE__*/_jsx(UserContext.Provider,{value:value,children:children});};export const useUser=()=>{const context=useContext(UserContext);if(context===undefined){throw new Error('useUser must be used within a UserProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useLocalStorage","jsx","_jsx","UserContext","undefined","mockUser","id","name","email","profile","age","gender","health_conditions","avatar","settings","preferred_units","notification_preferences","push","sms","report_ready","insights_update","recommendations","theme","created_at","updated_at","UserProvider","_ref","children","user","setUser","isLoading","setIsLoading","error","setError","login","password","Promise","resolve","setTimeout","Error","err","message","logout","updateUserSettings","Date","toISOString","updateUserProfile","process","env","NODE_ENV","value","isAuthenticated","Provider","useUser","context"],"sources":["/home/ubuntu/healthinsighttoday-frontend/src/context/UserContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, UserSettings } from '../types/User';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\ninterface UserContextProps {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  updateUserSettings: (settings: Partial<UserSettings>) => void;\n  updateUserProfile: (profile: Partial<User['profile']>) => void;\n}\n\nconst UserContext = createContext<UserContextProps | undefined>(undefined);\n\ninterface UserProviderProps {\n  children: ReactNode;\n}\n\n// Mock user for development\nconst mockUser: User = {\n  id: 'user-1',\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n  profile: {\n    age: 42,\n    gender: 'Male',\n    health_conditions: ['Hypertension', 'High Cholesterol'],\n    avatar: '/assets/images/default-profile.png'\n  },\n  settings: {\n    preferred_units: 'metric',\n    notification_preferences: {\n      email: true,\n      push: true,\n      sms: false,\n      report_ready: true,\n      insights_update: true,\n      recommendations: true\n    },\n    theme: 'light'\n  },\n  created_at: '2023-01-15T08:30:00Z',\n  updated_at: '2023-04-20T14:15:00Z'\n};\n\nexport const UserProvider: React.FC<UserProviderProps> = ({ children }) => {\n  const [user, setUser] = useLocalStorage<User | null>('user', null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, this would be an API call\n      // For now, we'll simulate a login with the mock user\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      if (email === 'demo@example.com' && password === 'password') {\n        setUser(mockUser);\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n  };\n\n  const updateUserSettings = (settings: Partial<UserSettings>) => {\n    if (!user) return;\n    \n    setUser({\n      ...user,\n      settings: {\n        ...user.settings,\n        ...settings\n      },\n      updated_at: new Date().toISOString()\n    });\n  };\n\n  const updateUserProfile = (profile: Partial<User['profile']>) => {\n    if (!user) return;\n    \n    setUser({\n      ...user,\n      profile: {\n        ...user.profile,\n        ...profile\n      },\n      updated_at: new Date().toISOString()\n    });\n  };\n\n  // Auto-login with mock user for development\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development' && !user) {\n      setUser(mockUser);\n    }\n  }, [setUser, user]);\n\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    error,\n    login,\n    logout,\n    updateUserSettings,\n    updateUserProfile\n  };\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n\nexport const useUser = (): UserContextProps => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}